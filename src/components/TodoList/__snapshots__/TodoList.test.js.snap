// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TodoList renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TodoList
    deleteTodo={[MockFunction]}
    todos={
      Array [
        Object {
          "completed": false,
          "id": "0",
          "text": "todo item 1",
        },
        Object {
          "completed": true,
          "id": "1",
          "text": "todo item 2",
        },
        Object {
          "completed": true,
          "id": "2",
          "text": "todo item 3",
        },
      ]
    }
    toggleTodo={[MockFunction]}
    updateTodo={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <thead>
          <tr>
            <th>
              Todo
            </th>
            <th>
              Date
            </th>
            <th />
          </tr>
        </thead>,
        <tbody>
          <TodoItemRow
            completed={false}
            id="0"
            onClick={[MockFunction]}
            onDelete={[MockFunction]}
            onUpdate={[MockFunction]}
            text="todo item 1"
          />
          <TodoItemRow
            completed={true}
            id="1"
            onClick={[MockFunction]}
            onDelete={[MockFunction]}
            onUpdate={[MockFunction]}
            text="todo item 2"
          />
          <TodoItemRow
            completed={true}
            id="2"
            onClick={[MockFunction]}
            onDelete={[MockFunction]}
            onUpdate={[MockFunction]}
            text="todo item 3"
          />
        </tbody>,
      ],
      "className": "table",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <tr>
            <th>
              Todo
            </th>
            <th>
              Date
            </th>
            <th />
          </tr>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <th>
                Todo
              </th>,
              <th>
                Date
              </th>,
              <th />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Todo",
              },
              "ref": null,
              "rendered": "Todo",
              "type": "th",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Date",
              },
              "ref": null,
              "rendered": "Date",
              "type": "th",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "th",
            },
          ],
          "type": "tr",
        },
        "type": "thead",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <TodoItemRow
              completed={false}
              id="0"
              onClick={[MockFunction]}
              onDelete={[MockFunction]}
              onUpdate={[MockFunction]}
              text="todo item 1"
            />,
            <TodoItemRow
              completed={true}
              id="1"
              onClick={[MockFunction]}
              onDelete={[MockFunction]}
              onUpdate={[MockFunction]}
              text="todo item 2"
            />,
            <TodoItemRow
              completed={true}
              id="2"
              onClick={[MockFunction]}
              onDelete={[MockFunction]}
              onUpdate={[MockFunction]}
              text="todo item 3"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "class",
            "props": Object {
              "completed": false,
              "id": "0",
              "onClick": [MockFunction],
              "onDelete": [MockFunction],
              "onUpdate": [MockFunction],
              "text": "todo item 1",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "completed": true,
              "id": "1",
              "onClick": [MockFunction],
              "onDelete": [MockFunction],
              "onUpdate": [MockFunction],
              "text": "todo item 2",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "class",
            "props": Object {
              "completed": true,
              "id": "2",
              "onClick": [MockFunction],
              "onDelete": [MockFunction],
              "onUpdate": [MockFunction],
              "text": "todo item 3",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "tbody",
      },
    ],
    "type": "table",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <thead>
            <tr>
              <th>
                Todo
              </th>
              <th>
                Date
              </th>
              <th />
            </tr>
          </thead>,
          <tbody>
            <TodoItemRow
              completed={false}
              id="0"
              onClick={[MockFunction]}
              onDelete={[MockFunction]}
              onUpdate={[MockFunction]}
              text="todo item 1"
            />
            <TodoItemRow
              completed={true}
              id="1"
              onClick={[MockFunction]}
              onDelete={[MockFunction]}
              onUpdate={[MockFunction]}
              text="todo item 2"
            />
            <TodoItemRow
              completed={true}
              id="2"
              onClick={[MockFunction]}
              onDelete={[MockFunction]}
              onUpdate={[MockFunction]}
              text="todo item 3"
            />
          </tbody>,
        ],
        "className": "table",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <tr>
              <th>
                Todo
              </th>
              <th>
                Date
              </th>
              <th />
            </tr>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <th>
                  Todo
                </th>,
                <th>
                  Date
                </th>,
                <th />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Todo",
                },
                "ref": null,
                "rendered": "Todo",
                "type": "th",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Date",
                },
                "ref": null,
                "rendered": "Date",
                "type": "th",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "th",
              },
            ],
            "type": "tr",
          },
          "type": "thead",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <TodoItemRow
                completed={false}
                id="0"
                onClick={[MockFunction]}
                onDelete={[MockFunction]}
                onUpdate={[MockFunction]}
                text="todo item 1"
              />,
              <TodoItemRow
                completed={true}
                id="1"
                onClick={[MockFunction]}
                onDelete={[MockFunction]}
                onUpdate={[MockFunction]}
                text="todo item 2"
              />,
              <TodoItemRow
                completed={true}
                id="2"
                onClick={[MockFunction]}
                onDelete={[MockFunction]}
                onUpdate={[MockFunction]}
                text="todo item 3"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "class",
              "props": Object {
                "completed": false,
                "id": "0",
                "onClick": [MockFunction],
                "onDelete": [MockFunction],
                "onUpdate": [MockFunction],
                "text": "todo item 1",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "class",
              "props": Object {
                "completed": true,
                "id": "1",
                "onClick": [MockFunction],
                "onDelete": [MockFunction],
                "onUpdate": [MockFunction],
                "text": "todo item 2",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "class",
              "props": Object {
                "completed": true,
                "id": "2",
                "onClick": [MockFunction],
                "onDelete": [MockFunction],
                "onUpdate": [MockFunction],
                "text": "todo item 3",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "tbody",
        },
      ],
      "type": "table",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
